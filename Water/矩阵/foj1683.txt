#include <cstdio>
#include <iostream>
#include <algorithm>
#include <cmath>
#define mod 2009
using namespace std;
struct Matrix
{
    int m[5][5];
};
Matrix B,E,D;
void init()
{
    for(int i=1;i<=4;i++)
        for(int j=1;j<=4;j++)
            E.m[i][j]=(i==j);
    for(int i=1;i<=2;i++)
    {
        B.m[i][2]=3;
        B.m[i][3]=2;
        B.m[i][4]=7;
    }
    B.m[1][1]=1;
    B.m[2][1]=0;
    B.m[3][2]=B.m[4][3]=1;
    B.m[3][1]=B.m[3][3]=0;
    B.m[3][4]=B.m[4][1]=0;
    B.m[4][2]=B.m[4][4]=0;
    D.m[1][1]=9;
    D.m[2][1]=5;
    D.m[3][1]=3;
    D.m[4][1]=1;
}
Matrix Multi(Matrix A,Matrix B,int M,int N,int K)
{
    Matrix ans;
    for(int i=1;i<=M;i++)
        for(int j=1;j<=K;j++)
        {
            ans.m[i][j]=0;
            for(int k=1;k<=N;k++)
                ans.m[i][j]=(ans.m[i][j]+A.m[i][k]*B.m[k][j])%mod;
        }
    return ans;
}
Matrix Pow(Matrix A,int k)
{
    Matrix ans=E;
    while(k)
    {
        if(k&1)
        {
            k--;
            ans=Multi(ans,A,4,4,4);
        }
        else
        {
            k/=2;
            A=Multi(A,A,4,4,4);
        }
    }
    return ans;
}
int main()
{
    int t;
    scanf("%d",&t);
    init();
    for(int cases=1;cases<=t;cases++)
    {
        int n;
        scanf("%d",&n);
        int ans;
        if(n==0)
            ans=1;
        else if(n==1)
            ans=4;
        else
        {
            Matrix cnt=Pow(B,n-2);
            cnt=Multi(cnt,D,4,4,1);
            ans=cnt.m[1][1];
        }
        printf("Case %d: ",cases);
        printf("%d\n",ans%mod);
    }
    return 0;
}
